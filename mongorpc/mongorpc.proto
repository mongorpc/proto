// Copyright 2021 MongoRPC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package mongorpc;

option go_package = "github.com/mongorpc/mongorpc;mongorpc";

import "google/api/annotations.proto";
import "mongorpc/value.proto";

message GetDocumentRequest {
  // The database to query
  string database = 1;
  // The collection to query
  string collection = 2;
  // The document to query
  mongorpc.ObjectId document_id = 3;
}

// InsertDocumentRequest is a special type that is used to represent a insert document request in a MongoDB
message InsertDocumentRequest {
  // The database to insert the document into
  string database = 1;
  // The collection to insert the document into
  string collection = 2;
  // The document to insert
  mongorpc.Value document = 3;
}

// DeleteDocumentRequest is a special type that is used to represent a delete document request in a MongoDB
message DeleteDocumentRequest {
  // database name
  string database = 1;
  // collection name
  string collection = 2;
  // document id
  mongorpc.ObjectId document_id = 3;
}

// UpdateDocumentRequest is a special type that is used to represent a update document request in a MongoDB
message UpdateDocumentRequest {
  // The database to use
  string database = 1;
  // The collection to use
  string collection = 2;
  // The document to update
  mongorpc.ObjectId document_id = 3;
  // Document Values
  Value document = 4;
}

// MongoRPC
service MongoRPC {
  rpc GetDocument(GetDocumentRequest) returns (mongorpc.Value) {
    option (google.api.http) = {
      get: "/v1/{database}/{collection}/{document_id}"
      body: "*"
    };
  }
  rpc InsertDocument(InsertDocumentRequest) returns (mongorpc.ObjectId) {
    option (google.api.http) = {
      post: "/v1/{database}/{collection}"
      body: "*"
    };
  }
  rpc UpdateDocument(UpdateDocumentRequest) returns (mongorpc.Value) {
    option (google.api.http) = {
      put: "/v1/{database}/{collection}"
      body: "*"
    };
  }
  rpc DeleteDocument(DeleteDocumentRequest) returns (mongorpc.Value) {
    option (google.api.http) = {
      delete: "/v1/{database}/{collection}/{document_id}"
      body: "*"
    };
  }
}
